# -*- coding: utf-8 -*-
"""SAI SAKETH NAGAVALLI (3).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OEjDsOrTKdhyJE6QtxsJQHBxYe-AyoIN
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
import warnings
warnings.filterwarnings('ignore')

br=pd.read_csv("Bronoc-red.csv",delimiter=";")
bw=pd.read_csv("Bronoc-white.csv",delimiter=";")

cd=pd.concat([br,bw],axis=0,ignore_index='True')

cd.head()

cd.tail()

cd.shape

cd.isnull().sum()

sb.displot(cd["fixed acidity"])
plt.subplot(122)
cd["fixed acidity"].plot.box(figsize=(15,5))

sb.displot(cd["volatile acidity"])
plt.subplot(122)
cd["volatile acidity"].plot.box(figsize=(15,5))

sb.displot(cd["citric acid"])
plt.subplot(122)
cd["citric acid"].plot.box(figsize=(15,5))

sb.displot(cd["residual sugar"])
plt.subplot(122)
cd["residual sugar"].plot.box(figsize=(15,5))

sb.displot(cd["chlorides"])
plt.subplot(122)
cd["chlorides"].plot.box(figsize=(15,5))

sb.displot(cd["free sulfur dioxide"])
plt.subplot(122)
cd["free sulfur dioxide"].plot.box(figsize=(15,5))

sb.displot(cd["total sulfur dioxide"])
plt.subplot(122)
cd["total sulfur dioxide"].plot.box(figsize=(15,5))

sb.displot(cd["free sulfur dioxide"])
plt.subplot(122)
cd["free sulfur dioxide"].plot.box(figsize=(15,5))

sb.displot(cd["density"])
plt.subplot(122)
cd["density"].plot.box(figsize=(15,5))

sb.displot(cd["pH"])
plt.subplot(122)
cd["pH"].plot.box(figsize=(15,5))

sb.displot(cd["sulphates"])
plt.subplot(122)
cd["sulphates"].plot.box(figsize=(15,5))

sb.displot(cd["alcohol"])
plt.subplot(122)
cd["alcohol"].plot.box(figsize=(15,5))

sb.displot(cd["quality"])
plt.subplot(122)
cd["quality"].plot.box(figsize=(15,5))

#Missing values
fig,axes=plt.subplots(5,2,figsize=(16,12))
sb.barplot(ax=axes[0,0],data=br,x='quality',y='fixed acidity')
sb.barplot(ax=axes[0,0],data=br,x='quality',y='volatile acidity')
sb.barplot(ax=axes[0,1],data=br,x='quality',y='citric acid')
sb.barplot(ax=axes[1,0],data=br,x='quality',y='residual sugar')
sb.barplot(ax=axes[1,1],data=br,x='quality',y='chlorides')
sb.barplot(ax=axes[2,0],data=br,x='quality',y='free sulfur dioxide')
sb.barplot(ax=axes[2,1],data=br,x='quality',y='total sulfur dioxide')
sb.barplot(ax=axes[3,0],data=br,x='quality',y='density')
sb.barplot(ax=axes[3,1],data=br,x='quality',y='pH')
sb.barplot(ax=axes[4,0],data=br,x='quality',y='sulphates')
sb.barplot(ax=axes[4,1],data=br,x='quality',y='alcohol')

sb.pairplot(cd)

cd.corr()

plt.figure(figsize=(15,10))
sb.heatmap(cd.corr(),cmap='Greens')

cn=cd.drop('total sulfur dioxide',axis=1)

cn.head()

cn.isnull().sum()

n=cn['quality'].apply(lambda n:1 if n>7 else 0)
print(n)

m=cn.drop('quality',axis=1)

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

sc=StandardScaler()
sc.fit(m)
m_std=sc.transform(m)
m=m_std

m_tr,m_te,n_tr,n_te=train_test_split(m,n,test_size=0.35,random_state=123)
lr=LogisticRegression()
lr.fit(m_tr,n_tr)

n_pred=lr.predict(m_te)
accuracy_score(n_te,n_pred)

print(classification_report(n_te,n_pred))

print(confusion_matrix(n_te,n_pred))

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn import tree

dc=DecisionTreeClassifier()
dc.fit(m_tr,n_tr)
nn_pred=dc.predict(m_te)
print("Accuracy: ",metrics.accuracy_score(n_te,nn_pred))

dc.feature_importances_

pd.Series(dc.feature_importances_,index=cn.drop('quality',axis=1).columns).plot(kind='barh')

from sklearn.tree import export_graphviz
from io import StringIO
from IPython.display import Image
import pydotplus
import graphviz

dot_data=StringIO()
export_graphviz(dc,out_file=dot_data,filled=True,rounded=True,special_characters=True,feature_names=cn.drop('quality',axis=1).columns.values,class_names=['0','1']
            )
graph=pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png('bronoc.png')
Image(graph.create_png())



